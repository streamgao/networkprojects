{"_id":"com.megster.cordova.rfduino","_rev":"19-206800e301043576b3a259a3855abdfa","name":"com.megster.cordova.rfduino","description":"Cordova Plugin for RFduino","dist-tags":{"latest":"0.1.2"},"versions":{"0.0.1":{"version":"0.0.1","name":"com.megster.cordova.rfduino","cordova_name":"RFduino","description":"Cordova Plugin for RFduino","license":"Apache 2.0","keywords":["bluetooth"," arduino"," rfduino"],"engines":[{"name":"cordova","version":">=3.1.0"}],"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nFor this version rfduino.write() only accepts strings and does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  **Data must be a String.** for this version.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n\n","readmeFilename":"README.md","_id":"com.megster.cordova.rfduino@0.0.1","dist":{"shasum":"f71d2ae1edb1c986f1199adabf6e1373bc0822aa","tarball":"http://cordova.iriscouch.com/registry/_design/app/_rewrite/com.megster.cordova.rfduino/-/com.megster.cordova.rfduino-0.0.1.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"don","email":"don.coleman@gmail.com"},"maintainers":[{"name":"don","email":"don.coleman@gmail.com"}],"directories":{}},"0.0.2":{"version":"0.0.2","name":"com.megster.cordova.rfduino","cordova_name":"RFduino","description":"Cordova Plugin for RFduino","license":"Apache 2.0","keywords":["bluetooth"," arduino"," rfduino"],"engines":[{"name":"cordova","version":">=3.1.0"}],"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n* Android\n\nAndroid 4.3 or greater is required. Update the generated cordova project from target 17 to 18 or 19\n\n    $ android update project -p platforms/android -t android-19\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nFor this version rfduino.write() only accepts strings and does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  **Data must be a String.** for this version.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n\n","readmeFilename":"README.md","_id":"com.megster.cordova.rfduino@0.0.2","dist":{"shasum":"dd68f2ee02ff8cb157dcfcd8ee8d75fa368afe7c","tarball":"http://cordova.iriscouch.com/registry/_design/app/_rewrite/com.megster.cordova.rfduino/-/com.megster.cordova.rfduino-0.0.2.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"don","email":"don.coleman@gmail.com"},"maintainers":[{"name":"don","email":"don.coleman@gmail.com"}],"directories":{}},"0.0.3":{"version":"0.0.3","name":"com.megster.cordova.rfduino","cordova_name":"RFduino","description":"Cordova Plugin for RFduino","license":"Apache 2.0","keywords":["bluetooth"," arduino"," rfduino"],"engines":[{"name":"cordova","version":">=3.1.0"}],"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n* Android\n\nAndroid 4.3 or greater is required. Update the generated cordova project from target 17 to 18 or 19\n\n    $ android update project -p platforms/android -t android-19\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nFor this version rfduino.write() only accepts strings and does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  **Data must be a String.** for this version.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n\n","readmeFilename":"README.md","_id":"com.megster.cordova.rfduino@0.0.3","dist":{"shasum":"c423aa3a89155db2037b6d72872c55455e6098ad","tarball":"http://cordova.iriscouch.com/registry/_design/app/_rewrite/com.megster.cordova.rfduino/-/com.megster.cordova.rfduino-0.0.3.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"don","email":"don.coleman@gmail.com"},"maintainers":[{"name":"don","email":"don.coleman@gmail.com"}],"directories":{}},"0.1.0":{"version":"0.1.0","name":"com.megster.cordova.rfduino","cordova_name":"RFduino","description":"Cordova Plugin for RFduino","license":"Apache 2.0","keywords":["bluetooth"," arduino"," rfduino"],"engines":[{"name":"cordova","version":">=3.1.0"}],"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n* Android 4.3 or greater\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nrfduino.write() does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  Data must be an ArrayBuffer for this version.\n\n### Parameters\n\n- __data__: ArrayBuffer to write to the RFduino\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    var data = new ArrayBuffer(3);\n    data[0] = 0xFF;\n    data[1] = 0x00;\n    data[2] = 0x17;\n    rfduino.write(data.buffer, success, failure);\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n","readmeFilename":"README.md","_id":"com.megster.cordova.rfduino@0.1.0","dist":{"shasum":"e3f69201339798fe11e7fb35b9b9668367e2da98","tarball":"http://cordova.iriscouch.com/registry/_design/app/_rewrite/com.megster.cordova.rfduino/-/com.megster.cordova.rfduino-0.1.0.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"don","email":"don.coleman@gmail.com"},"maintainers":[{"name":"don","email":"don.coleman@gmail.com"}],"directories":{}},"0.1.1":{"version":"0.1.1","name":"com.megster.cordova.rfduino","cordova_name":"RFduino","description":"Cordova Plugin for RFduino","license":"Apache 2.0","keywords":["bluetooth"," BLE"," arduino"," rfduino"],"engines":[{"name":"cordova","version":">=3.1.0"}],"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n* Android 4.3 or greater\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nrfduino.write() does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  Data must be an ArrayBuffer for this version.\n\n### Parameters\n\n- __data__: ArrayBuffer to write to the RFduino\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    var data = new ArrayBuffer(3);\n    data[0] = 0xFF;\n    data[1] = 0x00;\n    data[2] = 0x17;\n    rfduino.write(data.buffer, success, failure);\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n","readmeFilename":"README.md","_id":"com.megster.cordova.rfduino@0.1.1","dist":{"shasum":"e1080f89fac02489fa57215bac9b11638c71c15e","tarball":"http://registry.cordova.io/com.megster.cordova.rfduino/-/com.megster.cordova.rfduino-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"don","email":"don.coleman@gmail.com"},"maintainers":[{"name":"don","email":"don.coleman@gmail.com"}]},"0.1.2":{"version":"0.1.2","name":"com.megster.cordova.rfduino","cordova_name":"RFduino","description":"Cordova Plugin for RFduino","license":"Apache 2.0","keywords":["bluetooth"," BLE"," arduino"," rfduino"],"engines":[{"name":"cordova","version":">=3.1.0"}],"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n* Android 4.3 or greater\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nrfduino.write() does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  Data must be an ArrayBuffer for this version.\n\n### Parameters\n\n- __data__: ArrayBuffer to write to the RFduino\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    var data = new ArrayBuffer(3);\n    data[0] = 0xFF;\n    data[1] = 0x00;\n    data[2] = 0x17;\n    rfduino.write(data.buffer, success, failure);\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n","readmeFilename":"README.md","_id":"com.megster.cordova.rfduino@0.1.2","dist":{"shasum":"a7b79960679a422a9083902d85a0036acf3fdc2a","tarball":"http://registry.cordova.io/com.megster.cordova.rfduino/-/com.megster.cordova.rfduino-0.1.2.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"don","email":"don.coleman@gmail.com"},"maintainers":[{"name":"don","email":"don.coleman@gmail.com"}]}},"readme":"# RFduino Plugin for PhoneGap\n\nThis plugin enabled Bluetooth communication between a phone and an [RFduino](http://www.rfduino.com/).\n\n## Supported Platforms\n\n* iOS\n\n## Limitations\n\nThis is an early version of plugin, the API is likely to change.\n\nThe current version will only connect to one RFduino at a time.\n\nFor this version rfduino.write() only accepts strings and does not check if data exceeds the max size.\n\n# Installing\n\nInstall with Cordova cli\n\n    $ cordova plugin add com.megster.cordova.rfduino\n\n# API\n\n## Methods\n\n- [rfduino.discover](#discover)\n- [rfduino.list](#list)\n\n- [rfduino.connect](#connect)\n- [rfduino.disconnect](#disconnect)\n\n- [rfduino.onData](#ondata)\n- [rfduino.write](#write)\n\n- [rfduino.isEnabled](#isenabled)\n- [rfduino.isConnected](#isconnected)\n\n\n## discover\n\nDiscover RFduino devices\n\n    rfduino.discover(seconds, success, failure);\n\n### Description\n\nFunction `discover` discovers the local RFduino devices.  The success callback is called each time a peripheral is discovered.\n\n    {\n        \"name\": \"RFduino\",\n        \"uuid\": \"BD922605-1B07-4D55-8D09-B66653E51BBA\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }\n\n### Parameters\n\n- __seconds__: Number of seconds to run discovery\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.discover(3, function(device) {\n        console.log(JSON.stringify(device));\n    }, failure);\n\n## list\n\nLists known devices\n\n    rfduino.list(success, failure);\n\n### Description\n\nFunction `list` lists the known RFduino devices.  The success callback is called with a list of objects.\n\nThis will return an empty list unless `discover` have previously run. You should prefer `discover` to `list`.\n\n    [{\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"echo\",\n        \"rssi\": -79\n    }, {\n        \"name\": \"RFduino\",\n        \"uuid\": \"AEC00232-2F92-4033-8E80-FD4C2533769C\",\n        \"advertising\": \"temp\",\n        \"rssi\": -55\n    }]\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a list of bonded devices.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.list(function(devices) {\n        devices.forEach(function(device) {\n            console.log(device.uuid);\n        })\n    }, failure);\n\n\n## connect\n\nConnect to a RFduino device.\n\n    rfduino.connect(uuid, connectSuccess, connectFailure);\n\n### Description\n\nFunction `connect` connects to a RFduino device.  The callback is long running.  Success will be called when the connection is successful.  Failure is called if the connection fails, or later if the connection disconnects. An error message is passed to the failure callback.\n\n### Parameters\n\n- __uuid__: UUID of the remote device\n- __connectSuccess__: Success callback function that is invoked when the connection is successful.\n- __connectFailure__: Error callback function, invoked when error occurs or the connection disconnects.\n\n## disconnect\n\nDisconnect.\n\n    rfduino.disconnect([success], [failure]);\n\n### Description\n\nFunction `disconnect` disconnects the current connection.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## onData\n\nAdds a callback for processing data from the RFduino.\n\n    rfduino.onData(success, failure);\n\n### Description\n\nFunction `onData` registers a function that is called whenever phone receives data from the RFduino.\n\nRaw data is passed from ObjectiveC the callback as an [ArrayBuffer](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/) and must be processed.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## write\n\nWrites data to the currently connected device\n\n    rfduino.write(data, success, failure);\n\n### Description\n\nFunction `write` writes data to the connected device.  **Data must be a String.** for this version.\n\n### Parameters\n\n- __success__: Success callback function that is invoked when the connection is successful. [optional]\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n## isConnected\n\nReports the connection status.\n\n    rfduino.isConnected(success, failure);\n\n### Description\n\nFunction `isConnected` calls the success callback when connected to a peer and the failure callback when *not* connected.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isConnected(\n        function() {\n            console.log(\"RFduino is connected\");\n        },\n        function() {\n            console.log(\"RFduino is *not* connected\");\n        }\n    );\n\n## isEnabled\n\nReports if bluetooth is enabled.\n\n    rfduino.isEnabled(success, failure);\n\n### Description\n\nFunction `isEnabled` calls the success callback when Bluetooth is enabled and the failure callback when Bluetooth is *not* enabled.\n\n### Parameters\n\n- __success__: Success callback function that is invoked with a boolean for connected status.\n- __failure__: Error callback function, invoked when error occurs. [optional]\n\n### Quick Example\n\n    rfduino.isEnabled(\n        function() {\n            console.log(\"Bluetooth is enabled\");\n        },\n        function() {\n            console.log(\"Bluetooth is *not* enabled\");\n        }\n    );\n\n# License\n\nApache 2.0\n\n# Feedback\n\nTry the code. If you find an problem or missing feature, file an issue or create a pull request.\n\n","maintainers":[{"name":"don","email":"don.coleman@gmail.com"}],"time":{"modified":"2014-09-24T21:47:30.384Z","created":"2013-11-18T00:18:38.221Z","0.0.1":"2013-11-18T00:18:38.727Z","0.0.2":"2013-11-19T07:17:19.031Z","0.0.3":"2014-08-29T05:21:20.713Z","0.1.0":"2014-09-12T00:04:00.216Z","0.1.1":"2014-09-24T21:46:38.892Z","0.1.2":"2014-09-24T21:47:30.384Z"},"_attachments":{"com.megster.cordova.rfduino-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":0,"digest":"md5-iNDibVk8mgZvzczEmBBEbA==","length":15079,"stub":true},"com.megster.cordova.rfduino-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":0,"digest":"md5-/ntSvjDts6EoJKtHYUYyVg==","length":15105,"stub":true},"com.megster.cordova.rfduino-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":0,"digest":"md5-uh5YcV4EXF0p/f+E0AYnKA==","length":15042,"stub":true},"com.megster.cordova.rfduino-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":0,"digest":"md5-8Mop3s2p2rkOybyZX0VdFg==","length":14853,"stub":true},"com.megster.cordova.rfduino-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":0,"digest":"md5-Nt0aogIhqsQFULina97rtw==","length":12313,"stub":true},"com.megster.cordova.rfduino-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":0,"digest":"md5-i6z9qQdbOTsjKvmgXHP2Ow==","length":8720,"stub":true}}}
